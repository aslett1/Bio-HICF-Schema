#!/usr/bin/env perl
#
# set_midas_password
# jt6 20150224 WTSI
#
# set the password for the user

# ABSTRACT: set the password for the given MIDAS website user
# PODNAME: set_midas_password

use strict;
use warnings;

use utf8;
use Config::General;
use Getopt::Long::Descriptive;
use Pod::Usage;
use Bio::HICF::Schema;
use Term::ReadKey;
use open qw( :std :utf8 );
use Try::Tiny;
use Carp qw( croak );

#-------------------------------------------------------------------------------
# configuration

my ( $opt, $usage ) = describe_options(
  '%c %o',
  [ 'dbconfig|d=s',   'path to the database configuration file' ],
  [ 'username|u=s',   'the username whose password will be changed' ],
  [ 'passphrase|p=s', 'the new password for the user' ],
  [ 'help|h',         'print usage message' ],
);

pod2usage( { -verbose => 2, -exitval => 0 } ) if $opt->help;

my $config_file = $opt->dbconfig || $ENV{HICF_CONFIG};
my $username    = $opt->username;
my $passphrase  = $opt->passphrase;

_usage($usage, 'ERROR: you must specify a script configuration file')
  unless defined $config_file;

_usage($usage, 'ERROR: you must specify a username')
  unless defined $username;

my $cg;
try {
  $cg = Config::General->new($config_file);
} catch {
  croak "ERROR: there was a problem reading the configuration file: $_";
};

my %config = $cg->getall;

my $schema = Bio::HICF::Schema->connect( @{ $config{database}->{connect_info} } );

#-------------------------------------------------------------------------------

# if a password was specified on the command line, use that, otherwise ask the
# user to input a password. Twice.
if ( not defined $passphrase ) {
  my $np1 = _get_password('enter password: ');
  my $np2 = _get_password('re-enter password: ');
  croak 'ERROR: passwords do not match' unless $np1 eq $np2;
  $passphrase = $np1;
}

$schema->set_passphrase($username, $passphrase);

print "password set for user '$username'\n";

exit;

#-------------------------------------------------------------------------------
#- functions -------------------------------------------------------------------
#-------------------------------------------------------------------------------

sub _get_password {
  my $prompt = shift;
  print $prompt || 'password: ';

  ReadMode('cbreak');
  $SIG{INT} = sub { ReadMode('restore'); die 'ERROR: interrupted' };

  my $password = '';
  while (1) {
    my $c;
    1 until defined ( $c = ReadKey(-1) );
    last if $c eq "\n";
    print "â€¢";
    $password .= $c;
  }
  print "\n";
  ReadMode('restore');

  return $password;
}

#-------------------------------------------------------------------------------

sub _usage {
  my ( $usage, $msg ) = @_;

  print STDERR "$msg\n";
  print $usage->text;
  exit 1;
}

#-------------------------------------------------------------------------------

__END__

=head1 SYNOPSIS

 shell% set_midas_password -d db.conf -u abc
 enter password:
 re-enter password:
 password set for user 'abc'

or Give the password on the command line:

 shell% set_midas_password -d db.conf -u abc -p ABCpass0
 password set for user 'abc'

=head1 DESCRIPTION

This script sets the password for the specified user in the MIDAS user database.
The database connection parameters are obtained from the configuration file
specified using C<--dbconfig>. The user whose password should be set is given
using the C<--username> parameter.

The password can either be specified using the C<--password> option or, if
C<--password> is not given, the script will prompt for the password to be
entered twice.

=head1 OPTIONS

=over 4

=item -d --dbconfig

checklist configuration file. B<Required>.

=item -u --username

username whose password should be changed. B<Required>.

=item -p --password

the password to set for the specified user

=item -h --help

display help text

=back

=head1 SEE ALSO

C<Bio::HICF::Schema>

=head1 CONTACT

path-help@sanger.ac.uk

=cut

