#!env perl
#
# PODNAME: load_antimicrobials
# ABSTRACT: loads one or more antimicrobial compound names
# jt6 20150206 WTSI

# vim: ft=perl :

use strict;
use warnings;

use Getopt::Long::Descriptive;
use Pod::Usage;
use Config::General;
use TryCatch;
use Carp qw( croak );
use File::Slurp;

use Bio::HICF::Schema;

#-------------------------------------------------------------------------------
# boilerplate

# define the accepted options
my ( $opt, $usage ) = describe_options(
  'load_antimicrobials %o <filename>',
  [ 'config|c=s', 'path to the configuration file' ],
  [ 'help|h',    'print usage message' ],
);

# show the POD as usage information
pod2usage( { -verbose => 2, -exitval => 0 } )
  if $opt->help;

# take the paths to the config either from the options or from an environment
# variable
my $config_file = $opt->config || $ENV{HICF_CONFIG};
my $file        = shift;

_usage('ERROR: you must specify a configuration file')
  unless defined $config_file;

_usage("ERROR: no such configuration file ($config_file)")
  unless -f $config_file;

_usage('ERROR: you must specify an input file')
  unless ( defined $file and -f $file );

#-------------------------------------------------------------------------------
# load configuration

my $cg;
try {
  $cg = Config::General->new($config_file);
}
catch ( $e ) {
  croak "ERROR: there was a problem reading the config file ($config_file): $e";
}

my %config = $cg->getall;

#-------------------------------------------------------------------------------

# read the file, skipping comments and blank rows
my @names = grep { ! m/^(#|\s*$)/ } read_file( $file );

print 'found ' . scalar @names . " rows to load from '$file'\n";

# get a database connection
my $schema = Bio::HICF::Schema->connect(@{ $config{database}->{connect_info} });

# load the rows in a transaction
try {
  $schema->txn_do( sub { $schema->load_antimicrobial($_) for ( @names ) } );
}
catch ( $e where { m/Rollback failed/ } ) {
  croak "ERROR: there was a problem loading some names in the list but we were unable to rollback changes";
}
catch ( $e where { m/invalid antimicrobial compound name/ } ) {
  $e =~ m/couldn't load '(.*?)'; invalid/;
  croak "ERROR: '$1' is not a valid compound name; loading was abandoned and the changes have been rolled back";
}

exit 0;

#-------------------------------------------------------------------------------
#- functions -------------------------------------------------------------------
#-------------------------------------------------------------------------------

sub _usage {
  my $msg = shift;

  print STDERR "$msg\n";
  print $usage->text;
  exit 1;
}

#-------------------------------------------------------------------------------

__END__

=head1 SYNOPSIS

 shell% load_antimicrobials -c hicf_script_configuration.conf

=head1 DESCRIPTION

This script takes a file containing a list of antimicrobial compound names and
loads them into the HICF database.

The input file can include comment lines (lines beginning with a "#") or blank
lines, which will both be ignored. The remaining lines in the file are assumed
to have one compound name per line.

If the file is found to contain any invalid compound names, loading is
abandoned and any changes to the database are rolled back, i.e. the script
loads the whole file or none of it.

=head1 OPTIONS

=over 4

=item -h --help

display help text

=item -c --config

configuration file giving database connection parameters. Required.

=back

=head1 SEE ALSO

L<Bio::HICF::Schema>

=head1 CONTACT

path-help@sanger.ac.uk

=cut

