#!env perl

# PODNAME:  load_manifest
# ABSTRACT: load a manifest CSV file into the database

use strict;
use warnings;

use Config::General;

use Getopt::Long::Descriptive;
use Pod::Usage;
use Bio::HICF::Schema;
use Bio::Metadata::Validator;
use Carp qw( croak );
use TryCatch;

#-------------------------------------------------------------------------------
# script boilerplate...

# define the accepted options
my ( $opt, $usage ) = describe_options(
  'load_manifest %o <filename>',
  [ 'checklist|c=s', 'path to the checklist configuration file' ],
  [ 'dbconfig|d=s',  'path to the database configuration file' ],
  [ 'help|h',        'print usage message' ],
);

# show the POD as usage information
pod2usage( { -verbose => 2, -exitval => 0 } )
  if $opt->help;

# take the paths to the files either from the options or from environment
# variables
my $checklist_config_file = $opt->checklist    || $ENV{CHECKLIST_CONFIG};
my $db_config_file    = $opt->dbconfig || $ENV{HICF_CONFIG};
my $file                  = shift;

_usage('ERROR: you must specify a checklist configuration file')
  unless defined $checklist_config_file;

_usage('ERROR: you must specify a script configuration file')
  unless defined $db_config_file;

_usage('ERROR: you must specify an input file')
  unless defined $file;

#-------------------------------------------------------------------------------

my $c = Bio::Metadata::Config->new( config_file => $checklist_config_file );
my $r = Bio::Metadata::Reader->new( config => $c );
my $m = $r->read_csv( $file );

my $cg;
try {
  $cg = Config::General->new($db_config_file);
}
catch ( $e ) {
  croak "ERROR: there was a problem reading the script configuration: $e";
}

my %config = $cg->getall;

my $schema = Bio::HICF::Schema->connect(@{ $config{database}->{connect_info} });

my @loaded_ids;
try {
  @loaded_ids = $schema->load_manifest($m);
  print 'manifest ', $m->uuid, " is loaded\n";
}
catch ( $e  where { m/no such table/ } ) {
  croak "ERROR: could not connect to the database: $e";
}
catch ( $e ) {
  croak "ERROR: there was a problem loading the manifest: $e";
}

exit ( scalar @loaded_ids ? 0 : 1 );

#-------------------------------------------------------------------------------
#- functions -------------------------------------------------------------------
#-------------------------------------------------------------------------------

sub _usage {
  my $msg = shift;

  print STDERR "$msg\n";
  print $usage->text;
  exit 1;
}

#-------------------------------------------------------------------------------

__END__

=head1 SYNOPSIS

 shell% load_manifest -c hicf.conf -d db.conf manifest.csv
 manifest 4162F712-1DD2-11B2-B17E-C09EFE1DC403 is loaded

=head1 DESCRIPTION

This script loads a sample manifest into the HICF database. The manifest must
conform to a checklist, specified using the C<--checklist> option, and the
database connection parameters must be supplied in a config file specified by
the C<--dbconfig> option. The manifest itself must be formatted as a
comma-separated values (CSV) file, as generated by dumping an excel
spreadsheet.

Before attempting to load the manifest, the script first validates the
contents using the specified checklist. If the manifest is invalid, an
error message is printed. Use the C<validate_manifest> script to check a
manifest and print any validation error messages.

=head1 OPTIONS

=over 4

=item -h --help

display help text

=item -c --config

checklist configuration file. Required.

=item -d --dbconfig

database connection parameters configuration file. Required.

=back

=head1 SEE ALSO

C<validate_manifest>,
L<Bio::Metadata::Validator>

=head1 CONTACT

path-help@sanger.ac.uk

=cut

